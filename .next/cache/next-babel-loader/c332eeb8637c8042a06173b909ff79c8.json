{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport ErrorPage from 'next/error';\nimport Container from '../../components/container';\nimport PostBody from '../../components/post-body';\nimport MoreStories from '../../components/more-stories';\nimport Header from '../../components/header';\nimport PostHeader from '../../components/post-header';\nimport SectionSeparator from '../../components/section-separator';\nimport Layout from '../../components/layout';\nimport { getAllPostsWithSlug, getPostAndMorePosts } from '../../lib/api';\nimport PostTitle from '../../components/post-title';\nimport { CMS_NAME } from '../../lib/constants';\nexport default function Post({\n  post,\n  morePosts,\n  preview\n}) {\n  var _post$_meta;\n\n  const router = useRouter();\n\n  if (!router.isFallback && !(post === null || post === void 0 ? void 0 : (_post$_meta = post._meta) === null || _post$_meta === void 0 ? void 0 : _post$_meta.uid)) {\n    return __jsx(ErrorPage, {\n      statusCode: 404\n    });\n  }\n\n  return __jsx(Layout, {\n    preview: preview\n  }, __jsx(Container, null, __jsx(Header, null), router.isFallback ? __jsx(PostTitle, null, \"Loading\\u2026\") : __jsx(React.Fragment, null, __jsx(\"article\", null, __jsx(Head, null, __jsx(\"title\", null, post.title[0].text, \" | Next.js Blog Example with \", CMS_NAME), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: post.coverimage.url\n  })), __jsx(PostHeader, {\n    title: post.title,\n    coverImage: post.coverimage,\n    date: post.date,\n    author: post.author\n  }), __jsx(PostBody, {\n    content: post.content\n  })), __jsx(SectionSeparator, null), morePosts && morePosts.length > 0 && __jsx(MoreStories, {\n    posts: morePosts\n  }))));\n}\nexport async function getStaticProps({\n  params,\n  preview = false,\n  previewData\n}) {\n  var _data$post, _data$morePosts;\n\n  const data = await getPostAndMorePosts(params.slug, previewData);\n  return {\n    props: {\n      preview,\n      post: (_data$post = data === null || data === void 0 ? void 0 : data.post) !== null && _data$post !== void 0 ? _data$post : null,\n      morePosts: (_data$morePosts = data === null || data === void 0 ? void 0 : data.morePosts) !== null && _data$morePosts !== void 0 ? _data$morePosts : []\n    }\n  };\n}\nexport async function getStaticPaths() {\n  const allPosts = await getAllPostsWithSlug();\n  return {\n    paths: (allPosts === null || allPosts === void 0 ? void 0 : allPosts.map(({\n      node\n    }) => `/posts/${node._meta.uid}`)) || [],\n    fallback: true\n  };\n}","map":null,"metadata":{},"sourceType":"module"}